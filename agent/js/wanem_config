#!/bin/bash -eu
# Configures the WANem-RPi traffic shaper.


usage() {
  cat <<EOF
${1:+$*

}Usage: $0 COMMAND [OPTIONS]
Configure the local ipfw-based traffic shaper.

#  COMMAND             'get', 'set', or 'clear'.
  COMMAND             'set' or 'clear'.
  --address VALUE     '' or 'any' (the default), an IP , or a MAC address.

  --down_bw VALUE     '', 'unlimited', or 0 for unlimited (the default),
                       int >0 for bits per second.
                       down == IN to address.

  --down_delay VALUE  '' or 0 for none (the default),
                      int >0 for milliseconds.

  --down_plr VALUE    '' or 0 for none (the default),
                      >0.0 and <=1.0 for packet loss rate.

  --up_bw VALUE       As noted above.  up == OUT from address.
  --up_delay VALUE
  --up_plr VALUE

  --device VALUE      Optional and ignored but might be used in the future.

  -v, --verbose       Enable verbose output.


Example "Mobile 3G (1.6 Mbps/768 Kbps 300ms RTT 0.01% PLR)":
  $0 set --address 1.2.3.4 \\
      --down_bw 1600000 --down_delay 150 \\
      --up_bw 768000 --up_delay 150 --up_plr 0.0001
EOF
  exit 1
}

##
## Echos the current ipfw settings for the given address.
##
## Example output:
##   --up_rule--up_pipe 0200 --up_bw 768000 --up_delay 150 --up_plr 0.0001
##
## \param up_or_down 'up' or 'down'.
## \param addr '', 'any', IP, or MAC address.
## \return 0 if success, else non-zero
#get_ipfw() {
#  local -r up_or_down="$1"
#  local -r addr=$([[ "${2:-any}" != any ]] && echo "$2")
#
#  local -r is_up=$([[ "$up_or_down" == 'up' ]] && echo true || echo false)
#  local -r dir=$($is_up && echo out|| echo in)
#  local -r from=$($is_up && echo "${addr:-any}" || echo any)
#  local -r to=$($is_up && echo any || echo "${addr:-any}")
#
#  local rule_id=
#  local pipe_id=
#  # Find rule.  Example list output:
#  #   00200 pipe 7 ip from any to 1.2.3.4 in
#  local -r rule_re="^[\ ]*[0-9]+[\ ]+pipe[\ ]+[0-9]+[\ ]+(ip|mac)$(:
#      )[\ ]+from[\ ]+$from[\ ]+to[\ ]+$to[\ ]+$dir[\ ]*$"
#  IFS=$'\n'
#  for line in $(ipfw_cmd list); do
#    IFS=' '
#    [[ $? -eq 0 ]] || return $?
#    if [[ "$line" =~ $rule_re ]]; then
#      local -a arr=($line)
#      rule_id="${arr[0]}"
#      pipe_id="${arr[2]}"
#    fi
#    IFS=$'\n'
#  done
#  IFS=' '
#  [[ -n "$rule_id" && -n "$pipe_id" ]] || return 0
#
#  local bw=0
#  local delay=0
#  local plr=0
#  # Parse `ipfw pipe show $pipe_id` output, e.g. on Linux:
#  #   00300:   1.234 Kbit/s 42 ms burst 0
#  #   q131372  50 sl.plr 0.001000 0 flows (1 buckets) sched 65836 ...
#  # and on OSX:
#  #   00300:   1.234 Kbit/s 42 ms 50 sl.plr 0.001 0 queues (1 buckets) ...
#  local -r part1_re="^[\ ]*0*$pipe_id:[\ ]+$(:
#      )(unlimited|([0-9]+\.[0-9]{3}[\ ]+[KM]?bit/s))$(:
#      )[\ ]+[0-9]+[\ ]+ms[\ ]+"
#  local -r part2_re="^.*[\ ][0-9]+[\ ]+sl\.plr[\ ]+[0-9\.]+[\ ]+[0-9]"
#  IFS=$'\n'
#  for line in $(ipfw_cmd pipe show "$pipe_id"); do
#    IFS=' '
#    [[ $? -eq 0 ]] || return $?
#    if [[ "$line" =~ $part1_re ]]; then
#      local -a arr=($line)
#      if [[ "${arr[1]}" == unlimited ]]; then
#        delay="${arr[2]}"
#      else
#        local int=${arr[1]%%\.*}
#        local fra=${arr[1]##*\.}
#        [[ "${arr[2]}" =~ ^M ]] && bw=$(((int*1000000 + fra*1000)))
#        [[ "${arr[2]}" =~ ^K ]] && bw=$(((int*1000 + fra)))
#        [[ "${arr[2]}" =~ ^b ]] && bw=$int
#        delay="${arr[3]}"
#      fi
#    fi
#    if [[ "$line" =~ $part2_re ]]; then
#      local -a arr=($line)
#      for (( i=0; i < ${#arr[@]}; i++ )); do
#        [[ "${arr[i]}" == 'sl.plr' ]] && plr="${arr[i+1]}"
#      done
#    fi
#    IFS=$'\n'
#  done
#  IFS=' '
#
#  local u="${up_or_down}"
#  echo "--${u}_rule $rule_id --${u}_pipe $pipe_id$(:
#    ) --${u}_bw $bw --${u}_delay $delay --${u}_plr $plr"
#  return 0
#}

#
# Update the ipfw rule and/or pipe
#
# \param addr '', 'any', IP, or MAC address.
# \param bw '', 'unlimited', or >0 (in bits per second).
# \param delay '' or >0 (in milliseconds)
# \param plr (packet loss rate) '' or 0.0 <= value <= 1.0.
# \return 0 if success, else non-zero
update_WANemRPi() {
  local -r addr=$([[ "$1" != any ]] && echo "$2")
  local -r bw_down=$([[ ! "$2" =~ ^(unlimited|0*)$ ]] && echo "$2")
  local -r bw_up=$([[ ! "$3" =~ ^(unlimited|0*)$ ]] && echo "$3")
  local -r delay_down=$([[ ! "$4" =~ ^0*$ ]] && echo "$4")
  local -r delay_up=$([[ ! "$5" =~ ^0*$ ]] && echo "$5")
  local -r plr_down=$([[ ! "$6" =~ ^0(\.0+)?$ ]] && echo "$6")
  local -r plr_up=$([[ ! "$7" =~ ^0(\.0+)?$ ]] && echo "$7")

  # Address must be 'any', IP, or a MAC
  local -r proto=$([[ -z "$addr" || "$addr" == any ]] && echo ip ||
      [[ "$addr" =~ ^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$ ]] && echo mac ||
      [[ "$addr" =~ ^[0-9a-fA-F\.:\$\/]+$ ]] && echo ip)
  [[ -n "$proto" ]] || { \
      echo "Invalid address '$addr'" >/dev/stderr; return 1; }

  # Bandwidth must be '', 'unlimited', or int >= 0
  [[ "$bw_down" =~ ^(unlimited|[0-9]+)?$ ]] || \
      { echo "Invalid bw '$bw_down'" >/dev/stderr; return 1; }
  [[ "$bw_up" =~ ^(unlimited|[0-9]+)?$ ]] || \
      { echo "Invalid bw '$bw_up'" >/dev/stderr; return 1; }

  # Divide delay equally  (must be '' or an int >= 0)
  [[ "$delay_down" =~ ^[0-9]*$ ]] || \
      { echo "Invalid delay '$delay_down'" >/dev/stderr; return 1; }
  [[ "$delay_up" =~ ^[0-9]*$ ]] || \
      { echo "Invalid delay '$delay_up'" >/dev/stderr; return 1; }

  # Incur all packet-loss-rate on the output  (must be '' or [0..1])
  [[ "$plr_down" =~ ^(0|0\.[0-9]+|1\.0+|1)?$ ]] || \
      { echo "Invalid plr '$plr_down'" >/dev/stderr; return 1; }
  [[ "$plr_up" =~ ^(0|0\.[0-9]+|1\.0+|1)?$ ]] || \
      { echo "Invalid plr '$plr_up'" >/dev/stderr; return 1; }

  #TODO bw-values muessen noch durch 1000 dividiert werden
  # Send REST call to WANem-RPi
  local http_url = "http://$addr:8080/set_shaping?bwdown=$bw_down&bwup=$bw_up&latencydown=$delay_down&latencyup=$delay_up&plrdown=$plr_down&plrup=$plr_up"
  echo $http_url
  local response_code = curl --write-out %{http_code} --silent --output /dev/null $http_url
  [[ "$response_code" == "200" ]] || \
      { echo "HTTP request failed '$response_code'" >/dev/stderr; return 1; }

  return 0
}

main() {
  # Parse args
  local command=
  local addr=
  local down_bw=99999
  local down_delay=0
  local down_plr=0
  local up_bw=99999
  local up_delay=0
  local up_plr=0
  while [[ $# -gt 0 ]]; do
    local v="${2:-MISSING}"
    local shift_by=2
    case "$1" in
      [^-]*) [[ -z "$command" ]] || usage "Duplicate command"
             command="$1"; shift_by=1;;
      --ipfw_path) ipfw_path="$v";;
      --address) addr="$v";;
      --device) ;;  # ignore for now
      --down_bw) down_bw="$v";;
      --down_delay) down_delay="$v";;
      --down_plr) down_plr="$v";;
      --up_bw) up_bw="$v";;
      --up_delay) up_delay="$v";;
      --up_plr) up_plr="$v";;
      -v | --verbose) set -x; shift_by=1;;
      -h | --help) usage;;
      *) usage "Unknown option '$1'";;
    esac
    shift $shift_by
  done

  [[ -z "$command" || "$command" == set ]] || \
      [[ -z "$down_bw" && -z "$down_delay" && -z "$down_plr" && -z "$up_bw" && -z "$up_delay" && -z "$up_plr" ]] ||
      usage "Unexpected down/up options"

  [[ "$command" == clear ]] && command=set

  if [[ "$command" == set ]]; then
    update_WANemRPi "$addr" "$down_bw" "$up_bw" "$down_delay" "$up_delay" "$down_plr" "$up_plr" || return 1
#  elif [[ "$command" == get ]]; then
#    get_ipfw down "$addr"
#    get_ipfw up "$addr"
  else
    usage ${command:+Unknown command \'$command\'}
  fi
  return 0
}

main $*
exit $?
